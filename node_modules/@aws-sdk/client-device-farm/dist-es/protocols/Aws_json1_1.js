import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { DeviceFarmServiceException as __BaseException } from "../models/DeviceFarmServiceException";
import { ArgumentException, CannotDeleteException, IdempotencyException, InternalServiceException, InvalidOperationException, LimitExceededException, NotEligibleException, NotFoundException, ServiceAccountException, TagOperationException, TagPolicyException, TooManyTagsException, } from "../models/models_0";
export const se_CreateDevicePoolCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDevicePool");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateInstanceProfileCommand = async (input, context) => {
    const headers = sharedHeaders("CreateInstanceProfile");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateNetworkProfileCommand = async (input, context) => {
    const headers = sharedHeaders("CreateNetworkProfile");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateProjectCommand = async (input, context) => {
    const headers = sharedHeaders("CreateProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRemoteAccessSessionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRemoteAccessSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTestGridProjectCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTestGridProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTestGridUrlCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTestGridUrl");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateUploadCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUpload");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVPCEConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateVPCEConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDevicePoolCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDevicePool");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteInstanceProfileCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteInstanceProfile");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteNetworkProfileCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteNetworkProfile");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteProjectCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRemoteAccessSessionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRemoteAccessSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRunCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTestGridProjectCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTestGridProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteUploadCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUpload");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVPCEConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteVPCEConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAccountSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("GetAccountSettings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDeviceCommand = async (input, context) => {
    const headers = sharedHeaders("GetDevice");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDeviceInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("GetDeviceInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDevicePoolCommand = async (input, context) => {
    const headers = sharedHeaders("GetDevicePool");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDevicePoolCompatibilityCommand = async (input, context) => {
    const headers = sharedHeaders("GetDevicePoolCompatibility");
    let body;
    body = JSON.stringify(se_GetDevicePoolCompatibilityRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetInstanceProfileCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstanceProfile");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetJobCommand = async (input, context) => {
    const headers = sharedHeaders("GetJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetNetworkProfileCommand = async (input, context) => {
    const headers = sharedHeaders("GetNetworkProfile");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetOfferingStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetOfferingStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetProjectCommand = async (input, context) => {
    const headers = sharedHeaders("GetProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRemoteAccessSessionCommand = async (input, context) => {
    const headers = sharedHeaders("GetRemoteAccessSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRunCommand = async (input, context) => {
    const headers = sharedHeaders("GetRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSuiteCommand = async (input, context) => {
    const headers = sharedHeaders("GetSuite");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTestCommand = async (input, context) => {
    const headers = sharedHeaders("GetTest");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTestGridProjectCommand = async (input, context) => {
    const headers = sharedHeaders("GetTestGridProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTestGridSessionCommand = async (input, context) => {
    const headers = sharedHeaders("GetTestGridSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetUploadCommand = async (input, context) => {
    const headers = sharedHeaders("GetUpload");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetVPCEConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("GetVPCEConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_InstallToRemoteAccessSessionCommand = async (input, context) => {
    const headers = sharedHeaders("InstallToRemoteAccessSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListArtifactsCommand = async (input, context) => {
    const headers = sharedHeaders("ListArtifacts");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDeviceInstancesCommand = async (input, context) => {
    const headers = sharedHeaders("ListDeviceInstances");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDevicePoolsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDevicePools");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDevicesCommand = async (input, context) => {
    const headers = sharedHeaders("ListDevices");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListInstanceProfilesCommand = async (input, context) => {
    const headers = sharedHeaders("ListInstanceProfiles");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListNetworkProfilesCommand = async (input, context) => {
    const headers = sharedHeaders("ListNetworkProfiles");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListOfferingPromotionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListOfferingPromotions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListOfferingsCommand = async (input, context) => {
    const headers = sharedHeaders("ListOfferings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListOfferingTransactionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListOfferingTransactions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListProjectsCommand = async (input, context) => {
    const headers = sharedHeaders("ListProjects");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRemoteAccessSessionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListRemoteAccessSessions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRunsCommand = async (input, context) => {
    const headers = sharedHeaders("ListRuns");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSamplesCommand = async (input, context) => {
    const headers = sharedHeaders("ListSamples");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSuitesCommand = async (input, context) => {
    const headers = sharedHeaders("ListSuites");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTestGridProjectsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTestGridProjects");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTestGridSessionActionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTestGridSessionActions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTestGridSessionArtifactsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTestGridSessionArtifacts");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTestGridSessionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTestGridSessions");
    let body;
    body = JSON.stringify(se_ListTestGridSessionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTestsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTests");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListUniqueProblemsCommand = async (input, context) => {
    const headers = sharedHeaders("ListUniqueProblems");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListUploadsCommand = async (input, context) => {
    const headers = sharedHeaders("ListUploads");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListVPCEConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListVPCEConfigurations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PurchaseOfferingCommand = async (input, context) => {
    const headers = sharedHeaders("PurchaseOffering");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RenewOfferingCommand = async (input, context) => {
    const headers = sharedHeaders("RenewOffering");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ScheduleRunCommand = async (input, context) => {
    const headers = sharedHeaders("ScheduleRun");
    let body;
    body = JSON.stringify(se_ScheduleRunRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopRemoteAccessSessionCommand = async (input, context) => {
    const headers = sharedHeaders("StopRemoteAccessSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopRunCommand = async (input, context) => {
    const headers = sharedHeaders("StopRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDeviceInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDeviceInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDevicePoolCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDevicePool");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateInstanceProfileCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateInstanceProfile");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateNetworkProfileCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateNetworkProfile");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateProjectCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateTestGridProjectCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTestGridProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateUploadCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateUpload");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateVPCEConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateVPCEConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CreateDevicePoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateNetworkProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateProjectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRemoteAccessSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRemoteAccessSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateTestGridProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTestGridProjectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateTestGridUrlCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTestGridUrlResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateUploadCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateUploadResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateVPCEConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDevicePoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteNetworkProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteRemoteAccessSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteTestGridProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteUploadCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteVPCEConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAccountSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAccountSettingsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDeviceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDeviceInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDevicePoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDevicePoolCompatibilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDevicePoolCompatibilityResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetJobResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetNetworkProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetOfferingStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOfferingStatusResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetProjectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRemoteAccessSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRemoteAccessSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRunResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSuiteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSuiteResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTestCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTestResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTestGridProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTestGridProjectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTestGridSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTestGridSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetUploadCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetUploadResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetVPCEConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_InstallToRemoteAccessSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_InstallToRemoteAccessSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListArtifactsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDeviceInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDevicePoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDevicesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListInstanceProfilesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListJobsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListNetworkProfilesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListOfferingPromotionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListOfferingsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListOfferingTransactionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListOfferingTransactionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListProjectsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRemoteAccessSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListRemoteAccessSessionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListRunsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSamplesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSuitesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSuitesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTestGridProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTestGridProjectsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTestGridSessionActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTestGridSessionActionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTestGridSessionArtifactsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTestGridSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTestGridSessionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTestsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListUniqueProblemsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListUniqueProblemsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListUploadsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListUploadsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListVPCEConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PurchaseOfferingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PurchaseOfferingResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RenewOfferingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RenewOfferingResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ScheduleRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ScheduleRunResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopJobResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopRemoteAccessSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopRemoteAccessSessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopRunResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDeviceInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDevicePoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateNetworkProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateProjectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateTestGridProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateTestGridProjectResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateUploadCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateUploadResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateVPCEConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ArgumentException":
        case "com.amazonaws.devicefarm#ArgumentException":
            throw await de_ArgumentExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.devicefarm#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.devicefarm#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceAccountException":
        case "com.amazonaws.devicefarm#ServiceAccountException":
            throw await de_ServiceAccountExceptionRes(parsedOutput, context);
        case "TagOperationException":
        case "com.amazonaws.devicefarm#TagOperationException":
            throw await de_TagOperationExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.devicefarm#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "CannotDeleteException":
        case "com.amazonaws.devicefarm#CannotDeleteException":
            throw await de_CannotDeleteExceptionRes(parsedOutput, context);
        case "InvalidOperationException":
        case "com.amazonaws.devicefarm#InvalidOperationException":
            throw await de_InvalidOperationExceptionRes(parsedOutput, context);
        case "NotEligibleException":
        case "com.amazonaws.devicefarm#NotEligibleException":
            throw await de_NotEligibleExceptionRes(parsedOutput, context);
        case "IdempotencyException":
        case "com.amazonaws.devicefarm#IdempotencyException":
            throw await de_IdempotencyExceptionRes(parsedOutput, context);
        case "TagPolicyException":
        case "com.amazonaws.devicefarm#TagPolicyException":
            throw await de_TagPolicyExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.devicefarm#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ArgumentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ArgumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_CannotDeleteExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new CannotDeleteException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_IdempotencyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new IdempotencyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServiceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NotEligibleExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NotEligibleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceAccountExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceAccountException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TagOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TagOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TagPolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TagPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_GetDevicePoolCompatibilityRequest = (input, context) => {
    return take(input, {
        appArn: [],
        configuration: (_) => se_ScheduleRunConfiguration(_, context),
        devicePoolArn: [],
        projectArn: [],
        test: _json,
        testType: [],
    });
};
const se_ListTestGridSessionsRequest = (input, context) => {
    return take(input, {
        creationTimeAfter: (_) => _.getTime() / 1_000,
        creationTimeBefore: (_) => _.getTime() / 1_000,
        endTimeAfter: (_) => _.getTime() / 1_000,
        endTimeBefore: (_) => _.getTime() / 1_000,
        maxResult: [],
        nextToken: [],
        projectArn: [],
        status: [],
    });
};
const se_Location = (input, context) => {
    return take(input, {
        latitude: __serializeFloat,
        longitude: __serializeFloat,
    });
};
const se_ScheduleRunConfiguration = (input, context) => {
    return take(input, {
        auxiliaryApps: _json,
        billingMethod: [],
        customerArtifactPaths: _json,
        deviceProxy: _json,
        extraDataPackageArn: [],
        locale: [],
        location: (_) => se_Location(_, context),
        networkProfileArn: [],
        radios: _json,
        vpceConfigurationArns: _json,
    });
};
const se_ScheduleRunRequest = (input, context) => {
    return take(input, {
        appArn: [],
        configuration: (_) => se_ScheduleRunConfiguration(_, context),
        devicePoolArn: [],
        deviceSelectionConfiguration: _json,
        executionConfiguration: _json,
        name: [],
        projectArn: [],
        test: _json,
    });
};
const de_AccountSettings = (output, context) => {
    return take(output, {
        awsAccountNumber: __expectString,
        defaultJobTimeoutMinutes: __expectInt32,
        maxJobTimeoutMinutes: __expectInt32,
        maxSlots: _json,
        skipAppResign: __expectBoolean,
        trialMinutes: (_) => de_TrialMinutes(_, context),
        unmeteredDevices: _json,
        unmeteredRemoteAccessDevices: _json,
    });
};
const de_CPU = (output, context) => {
    return take(output, {
        architecture: __expectString,
        clock: __limitedParseDouble,
        frequency: __expectString,
    });
};
const de_CreateProjectResult = (output, context) => {
    return take(output, {
        project: (_) => de_Project(_, context),
    });
};
const de_CreateRemoteAccessSessionResult = (output, context) => {
    return take(output, {
        remoteAccessSession: (_) => de_RemoteAccessSession(_, context),
    });
};
const de_CreateTestGridProjectResult = (output, context) => {
    return take(output, {
        testGridProject: (_) => de_TestGridProject(_, context),
    });
};
const de_CreateTestGridUrlResult = (output, context) => {
    return take(output, {
        expires: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        url: __expectString,
    });
};
const de_CreateUploadResult = (output, context) => {
    return take(output, {
        upload: (_) => de_Upload(_, context),
    });
};
const de_Device = (output, context) => {
    return take(output, {
        arn: __expectString,
        availability: __expectString,
        carrier: __expectString,
        cpu: (_) => de_CPU(_, context),
        fleetName: __expectString,
        fleetType: __expectString,
        formFactor: __expectString,
        heapSize: __expectLong,
        image: __expectString,
        instances: _json,
        manufacturer: __expectString,
        memory: __expectLong,
        model: __expectString,
        modelId: __expectString,
        name: __expectString,
        os: __expectString,
        platform: __expectString,
        radio: __expectString,
        remoteAccessEnabled: __expectBoolean,
        remoteDebugEnabled: __expectBoolean,
        resolution: _json,
    });
};
const de_DeviceMinutes = (output, context) => {
    return take(output, {
        metered: __limitedParseDouble,
        total: __limitedParseDouble,
        unmetered: __limitedParseDouble,
    });
};
const de_DevicePoolCompatibilityResult = (output, context) => {
    return take(output, {
        compatible: __expectBoolean,
        device: (_) => de_Device(_, context),
        incompatibilityMessages: _json,
    });
};
const de_DevicePoolCompatibilityResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DevicePoolCompatibilityResult(entry, context);
    });
    return retVal;
};
const de_Devices = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Device(entry, context);
    });
    return retVal;
};
const de_GetAccountSettingsResult = (output, context) => {
    return take(output, {
        accountSettings: (_) => de_AccountSettings(_, context),
    });
};
const de_GetDevicePoolCompatibilityResult = (output, context) => {
    return take(output, {
        compatibleDevices: (_) => de_DevicePoolCompatibilityResults(_, context),
        incompatibleDevices: (_) => de_DevicePoolCompatibilityResults(_, context),
    });
};
const de_GetDeviceResult = (output, context) => {
    return take(output, {
        device: (_) => de_Device(_, context),
    });
};
const de_GetJobResult = (output, context) => {
    return take(output, {
        job: (_) => de_Job(_, context),
    });
};
const de_GetOfferingStatusResult = (output, context) => {
    return take(output, {
        current: (_) => de_OfferingStatusMap(_, context),
        nextPeriod: (_) => de_OfferingStatusMap(_, context),
        nextToken: __expectString,
    });
};
const de_GetProjectResult = (output, context) => {
    return take(output, {
        project: (_) => de_Project(_, context),
    });
};
const de_GetRemoteAccessSessionResult = (output, context) => {
    return take(output, {
        remoteAccessSession: (_) => de_RemoteAccessSession(_, context),
    });
};
const de_GetRunResult = (output, context) => {
    return take(output, {
        run: (_) => de_Run(_, context),
    });
};
const de_GetSuiteResult = (output, context) => {
    return take(output, {
        suite: (_) => de_Suite(_, context),
    });
};
const de_GetTestGridProjectResult = (output, context) => {
    return take(output, {
        testGridProject: (_) => de_TestGridProject(_, context),
    });
};
const de_GetTestGridSessionResult = (output, context) => {
    return take(output, {
        testGridSession: (_) => de_TestGridSession(_, context),
    });
};
const de_GetTestResult = (output, context) => {
    return take(output, {
        test: (_) => de_Test(_, context),
    });
};
const de_GetUploadResult = (output, context) => {
    return take(output, {
        upload: (_) => de_Upload(_, context),
    });
};
const de_InstallToRemoteAccessSessionResult = (output, context) => {
    return take(output, {
        appUpload: (_) => de_Upload(_, context),
    });
};
const de_Job = (output, context) => {
    return take(output, {
        arn: __expectString,
        counters: _json,
        created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        device: (_) => de_Device(_, context),
        deviceMinutes: (_) => de_DeviceMinutes(_, context),
        instanceArn: __expectString,
        message: __expectString,
        name: __expectString,
        result: __expectString,
        started: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        stopped: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        type: __expectString,
        videoCapture: __expectBoolean,
        videoEndpoint: __expectString,
    });
};
const de_Jobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Job(entry, context);
    });
    return retVal;
};
const de_ListDevicesResult = (output, context) => {
    return take(output, {
        devices: (_) => de_Devices(_, context),
        nextToken: __expectString,
    });
};
const de_ListJobsResult = (output, context) => {
    return take(output, {
        jobs: (_) => de_Jobs(_, context),
        nextToken: __expectString,
    });
};
const de_ListOfferingsResult = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        offerings: (_) => de_Offerings(_, context),
    });
};
const de_ListOfferingTransactionsResult = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        offeringTransactions: (_) => de_OfferingTransactions(_, context),
    });
};
const de_ListProjectsResult = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        projects: (_) => de_Projects(_, context),
    });
};
const de_ListRemoteAccessSessionsResult = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        remoteAccessSessions: (_) => de_RemoteAccessSessions(_, context),
    });
};
const de_ListRunsResult = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        runs: (_) => de_Runs(_, context),
    });
};
const de_ListSuitesResult = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        suites: (_) => de_Suites(_, context),
    });
};
const de_ListTestGridProjectsResult = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        testGridProjects: (_) => de_TestGridProjects(_, context),
    });
};
const de_ListTestGridSessionActionsResult = (output, context) => {
    return take(output, {
        actions: (_) => de_TestGridSessionActions(_, context),
        nextToken: __expectString,
    });
};
const de_ListTestGridSessionsResult = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        testGridSessions: (_) => de_TestGridSessions(_, context),
    });
};
const de_ListTestsResult = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        tests: (_) => de_Tests(_, context),
    });
};
const de_ListUniqueProblemsResult = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        uniqueProblems: (_) => de_UniqueProblemsByExecutionResultMap(_, context),
    });
};
const de_ListUploadsResult = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        uploads: (_) => de_Uploads(_, context),
    });
};
const de_Location = (output, context) => {
    return take(output, {
        latitude: __limitedParseDouble,
        longitude: __limitedParseDouble,
    });
};
const de_MonetaryAmount = (output, context) => {
    return take(output, {
        amount: __limitedParseDouble,
        currencyCode: __expectString,
    });
};
const de_Offering = (output, context) => {
    return take(output, {
        description: __expectString,
        id: __expectString,
        platform: __expectString,
        recurringCharges: (_) => de_RecurringCharges(_, context),
        type: __expectString,
    });
};
const de_Offerings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Offering(entry, context);
    });
    return retVal;
};
const de_OfferingStatus = (output, context) => {
    return take(output, {
        effectiveOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        offering: (_) => de_Offering(_, context),
        quantity: __expectInt32,
        type: __expectString,
    });
};
const de_OfferingStatusMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_OfferingStatus(value, context);
        return acc;
    }, {});
};
const de_OfferingTransaction = (output, context) => {
    return take(output, {
        cost: (_) => de_MonetaryAmount(_, context),
        createdOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        offeringPromotionId: __expectString,
        offeringStatus: (_) => de_OfferingStatus(_, context),
        transactionId: __expectString,
    });
};
const de_OfferingTransactions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OfferingTransaction(entry, context);
    });
    return retVal;
};
const de_Problem = (output, context) => {
    return take(output, {
        device: (_) => de_Device(_, context),
        job: _json,
        message: __expectString,
        result: __expectString,
        run: _json,
        suite: _json,
        test: _json,
    });
};
const de_Problems = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Problem(entry, context);
    });
    return retVal;
};
const de_Project = (output, context) => {
    return take(output, {
        arn: __expectString,
        created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        defaultJobTimeoutMinutes: __expectInt32,
        name: __expectString,
        vpcConfig: _json,
    });
};
const de_Projects = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Project(entry, context);
    });
    return retVal;
};
const de_PurchaseOfferingResult = (output, context) => {
    return take(output, {
        offeringTransaction: (_) => de_OfferingTransaction(_, context),
    });
};
const de_RecurringCharge = (output, context) => {
    return take(output, {
        cost: (_) => de_MonetaryAmount(_, context),
        frequency: __expectString,
    });
};
const de_RecurringCharges = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RecurringCharge(entry, context);
    });
    return retVal;
};
const de_RemoteAccessSession = (output, context) => {
    return take(output, {
        arn: __expectString,
        billingMethod: __expectString,
        clientId: __expectString,
        created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        device: (_) => de_Device(_, context),
        deviceMinutes: (_) => de_DeviceMinutes(_, context),
        deviceProxy: _json,
        deviceUdid: __expectString,
        endpoint: __expectString,
        hostAddress: __expectString,
        instanceArn: __expectString,
        interactionMode: __expectString,
        message: __expectString,
        name: __expectString,
        remoteDebugEnabled: __expectBoolean,
        remoteRecordAppArn: __expectString,
        remoteRecordEnabled: __expectBoolean,
        result: __expectString,
        skipAppResign: __expectBoolean,
        started: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        stopped: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        vpcConfig: _json,
    });
};
const de_RemoteAccessSessions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RemoteAccessSession(entry, context);
    });
    return retVal;
};
const de_RenewOfferingResult = (output, context) => {
    return take(output, {
        offeringTransaction: (_) => de_OfferingTransaction(_, context),
    });
};
const de_Run = (output, context) => {
    return take(output, {
        appUpload: __expectString,
        arn: __expectString,
        billingMethod: __expectString,
        completedJobs: __expectInt32,
        counters: _json,
        created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        customerArtifactPaths: _json,
        deviceMinutes: (_) => de_DeviceMinutes(_, context),
        devicePoolArn: __expectString,
        deviceProxy: _json,
        deviceSelectionResult: _json,
        eventCount: __expectInt32,
        jobTimeoutMinutes: __expectInt32,
        locale: __expectString,
        location: (_) => de_Location(_, context),
        message: __expectString,
        name: __expectString,
        networkProfile: _json,
        parsingResultUrl: __expectString,
        platform: __expectString,
        radios: _json,
        result: __expectString,
        resultCode: __expectString,
        seed: __expectInt32,
        skipAppResign: __expectBoolean,
        started: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        stopped: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        testSpecArn: __expectString,
        totalJobs: __expectInt32,
        type: __expectString,
        vpcConfig: _json,
        webUrl: __expectString,
    });
};
const de_Runs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Run(entry, context);
    });
    return retVal;
};
const de_ScheduleRunResult = (output, context) => {
    return take(output, {
        run: (_) => de_Run(_, context),
    });
};
const de_StopJobResult = (output, context) => {
    return take(output, {
        job: (_) => de_Job(_, context),
    });
};
const de_StopRemoteAccessSessionResult = (output, context) => {
    return take(output, {
        remoteAccessSession: (_) => de_RemoteAccessSession(_, context),
    });
};
const de_StopRunResult = (output, context) => {
    return take(output, {
        run: (_) => de_Run(_, context),
    });
};
const de_Suite = (output, context) => {
    return take(output, {
        arn: __expectString,
        counters: _json,
        created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deviceMinutes: (_) => de_DeviceMinutes(_, context),
        message: __expectString,
        name: __expectString,
        result: __expectString,
        started: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        stopped: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        type: __expectString,
    });
};
const de_Suites = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Suite(entry, context);
    });
    return retVal;
};
const de_Test = (output, context) => {
    return take(output, {
        arn: __expectString,
        counters: _json,
        created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deviceMinutes: (_) => de_DeviceMinutes(_, context),
        message: __expectString,
        name: __expectString,
        result: __expectString,
        started: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        stopped: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        type: __expectString,
    });
};
const de_TestGridProject = (output, context) => {
    return take(output, {
        arn: __expectString,
        created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        name: __expectString,
        vpcConfig: _json,
    });
};
const de_TestGridProjects = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TestGridProject(entry, context);
    });
    return retVal;
};
const de_TestGridSession = (output, context) => {
    return take(output, {
        arn: __expectString,
        billingMinutes: __limitedParseDouble,
        created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ended: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        seleniumProperties: __expectString,
        status: __expectString,
    });
};
const de_TestGridSessionAction = (output, context) => {
    return take(output, {
        action: __expectString,
        duration: __expectLong,
        requestMethod: __expectString,
        started: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        statusCode: __expectString,
    });
};
const de_TestGridSessionActions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TestGridSessionAction(entry, context);
    });
    return retVal;
};
const de_TestGridSessions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TestGridSession(entry, context);
    });
    return retVal;
};
const de_Tests = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Test(entry, context);
    });
    return retVal;
};
const de_TrialMinutes = (output, context) => {
    return take(output, {
        remaining: __limitedParseDouble,
        total: __limitedParseDouble,
    });
};
const de_UniqueProblem = (output, context) => {
    return take(output, {
        message: __expectString,
        problems: (_) => de_Problems(_, context),
    });
};
const de_UniqueProblems = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UniqueProblem(entry, context);
    });
    return retVal;
};
const de_UniqueProblemsByExecutionResultMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_UniqueProblems(value, context);
        return acc;
    }, {});
};
const de_UpdateProjectResult = (output, context) => {
    return take(output, {
        project: (_) => de_Project(_, context),
    });
};
const de_UpdateTestGridProjectResult = (output, context) => {
    return take(output, {
        testGridProject: (_) => de_TestGridProject(_, context),
    });
};
const de_UpdateUploadResult = (output, context) => {
    return take(output, {
        upload: (_) => de_Upload(_, context),
    });
};
const de_Upload = (output, context) => {
    return take(output, {
        arn: __expectString,
        category: __expectString,
        contentType: __expectString,
        created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        message: __expectString,
        metadata: __expectString,
        name: __expectString,
        status: __expectString,
        type: __expectString,
        url: __expectString,
    });
};
const de_Uploads = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Upload(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `DeviceFarm_20150623.${operation}`,
    };
}
