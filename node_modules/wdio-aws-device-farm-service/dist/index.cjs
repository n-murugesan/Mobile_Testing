"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  launcher: () => launcher
});
module.exports = __toCommonJS(index_exports);

// src/launcher.ts
var import_client_device_farm = require("@aws-sdk/client-device-farm");
var import_webdriverio = require("webdriverio");
var DeviceFarmLauncher = class {
  constructor(_options) {
    this._options = _options;
    this.logger = void 0;
    this.devicefarmClient = new import_client_device_farm.DeviceFarmClient({ region: "us-west-2" });
  }
  async onPrepare(config, capabilities) {
    try {
      const getLogger = await import("@wdio/logger");
      this.logger = getLogger.default("@wdio/devicefarm-service");
    } catch {
    }
    if (Array.isArray(capabilities)) {
      for (const cap of capabilities) {
        await this.setRemoteSession(cap);
      }
    } else if (typeof capabilities === "object" && capabilities !== null) {
      for (const cap of Object.values(capabilities)) {
        await this.setRemoteSession(cap);
      }
    }
    await this.setRemoteSession(config);
  }
  async setRemoteSession(config) {
    var _a;
    const testGridUrlResult = await this.createSession();
    const url = new URL(testGridUrlResult.url);
    (_a = this.logger) == null ? void 0 : _a.info("Created device farm test grid:", testGridUrlResult);
    Object.assign(config, {
      protocol: "https",
      port: 443,
      hostname: url.hostname,
      path: url.pathname,
      connectionRetryTimeout: 18e4
    });
  }
  // https://docs.aws.amazon.com/devicefarm/latest/testgrid/testing-frameworks-nodejs.html
  async createSession() {
    var _a;
    const input = {
      projectArn: this._options.projectArn,
      expiresInSeconds: this._options.expiresInSeconds || 900
    };
    const command = new import_client_device_farm.CreateTestGridUrlCommand(input);
    try {
      return await this.devicefarmClient.send(command);
    } catch (err) {
      (_a = this.logger) == null ? void 0 : _a.error(err);
      throw new import_webdriverio.SevereServiceError(err.message);
    }
  }
};

// src/index.ts
var launcher = DeviceFarmLauncher;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  launcher
});
//# sourceMappingURL=index.cjs.map