// src/launcher.ts
import {
  CreateTestGridUrlCommand,
  DeviceFarmClient
} from "@aws-sdk/client-device-farm";
import { SevereServiceError } from "webdriverio";
var DeviceFarmLauncher = class {
  constructor(_options) {
    this._options = _options;
    this.logger = void 0;
    this.devicefarmClient = new DeviceFarmClient({ region: "us-west-2" });
  }
  async onPrepare(config, capabilities) {
    try {
      const getLogger = await import("@wdio/logger");
      this.logger = getLogger.default("@wdio/devicefarm-service");
    } catch {
    }
    if (Array.isArray(capabilities)) {
      for (const cap of capabilities) {
        await this.setRemoteSession(cap);
      }
    } else if (typeof capabilities === "object" && capabilities !== null) {
      for (const cap of Object.values(capabilities)) {
        await this.setRemoteSession(cap);
      }
    }
    await this.setRemoteSession(config);
  }
  async setRemoteSession(config) {
    var _a;
    const testGridUrlResult = await this.createSession();
    const url = new URL(testGridUrlResult.url);
    (_a = this.logger) == null ? void 0 : _a.info("Created device farm test grid:", testGridUrlResult);
    Object.assign(config, {
      protocol: "https",
      port: 443,
      hostname: url.hostname,
      path: url.pathname,
      connectionRetryTimeout: 18e4
    });
  }
  // https://docs.aws.amazon.com/devicefarm/latest/testgrid/testing-frameworks-nodejs.html
  async createSession() {
    var _a;
    const input = {
      projectArn: this._options.projectArn,
      expiresInSeconds: this._options.expiresInSeconds || 900
    };
    const command = new CreateTestGridUrlCommand(input);
    try {
      return await this.devicefarmClient.send(command);
    } catch (err) {
      (_a = this.logger) == null ? void 0 : _a.error(err);
      throw new SevereServiceError(err.message);
    }
  }
};

// src/index.ts
var launcher = DeviceFarmLauncher;
export {
  launcher
};
//# sourceMappingURL=index.js.map